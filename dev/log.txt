***6/19/2022***
- Created a done.txt file to store things that have been accomplished relared to YAPL.
***6/20/2022***
- Added the modulo operator.
- Added << and >> in lexer plus '|'.
- Added a number definition to be a double.
- BUG FIX: The number definition to a double was causing errors because of name conflicts so changed it to _number.
- Added a %= equal operator.
- Added the ~ to the lexer.
- Added the ~, |, &, and ^ bitwise operators. They work for both numbers and booleans.
- Added chars to lexer.
***6/21/2022***
- Started to get chars to work like adding and printing them.
***6/25/2022***
- Added a cast keyword.
- Casts work with chars and numbers.
***6/28/2022***
- Added ints
- All operands work with correct types.
- Casts work between types.
***6/30/2022***
- Inputs work (need to figure out new line stuff).
***7/2/2022***
- Fixed the \n problems, will have to add stuff like \b and \t, etc.
- Fixed a conditional bug: was not executing correct code for else and elifs.
- Fixed a type conversion issue between parser and interpreter.
- Added a redefintion error for variables (need to do it for functions).
- Some kind of bug found related to the construction of variables in loops.
***7/3/2022***
- Fixed above issue from 7/2/2022 (^^^).
- Added scope file for scope tests and what not.
***7/4/2022***
- Began simple checks for arrays.
***7/5/2022***
- Added virtual machine as a library.
- Fixed config files.
- Added tests
- Made vm directory "official".
- The scanner can stay the same (with updates and improvements of course), the parser/actual compiler is what needs to 
  change. It is what needs to be able to take the tokens and convert it to bytecode for the virtual machine (that is yet
  to be even made).

  Lexer -> Parser -> Ast -> Interpreter
    |
    v
  Compiler -> Bytecode -> Virtual Machine
- To read a file in C:

  FILE* file = fopen(path, "rb");

  fseek(file, 0L, SEEK_END);
  size_t fileSize = ftell(file);
  rewind(file);

  char* buffer = (char*)malloc(fileSize + 1);
  size_t bytesRead = fread(buffer, sizeof(char), fileSize, file);
  buffer[bytesRead] = '\0';

  fclose(file);
  return buffer;
- Thinking about moving to only C (for speed).
- New Language??? (call it Polaris).